{"ast":null,"code":"var _jsxFileName = \"/Users/sovitbhandari/Documents/Documents - Sovit's MacBook Pro/Finance Website/frontend/src/context/globalContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useContext, useState } from \"react\";\n\n// Define the base URL for the API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BASE_URL = \"http://localhost:5001/api/v1/\";\n\n// Create a context for global state management\nconst GlobalContext = /*#__PURE__*/React.createContext();\n\n// GlobalProvider component to manage state and API requests\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n  // State variables to store income, expenses, and errors\n  const [incomes, setIncomes] = useState([]);\n  const [expenses, setExpenses] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Function to add a new income entry via API\n  const addIncome = async income => {\n    try {\n      await axios.post(`${BASE_URL}add-income`, income);\n      fetchIncomes(); // Refresh the list of incomes after adding\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'An error occurred');\n    }\n  };\n  const fetchIncomes = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(`${BASE_URL}get-incomes`);\n      // Add type 'income' to each income item\n      const incomesWithType = data.map(income => ({\n        ...income,\n        type: 'income'\n      }));\n      setIncomes(incomesWithType);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'An error occurred');\n    }\n  };\n\n  // Function to remove an income entry via API\n  const removeIncome = async id => {\n    try {\n      await axios.delete(`${BASE_URL}delete-income/${id}`);\n      fetchIncomes(); // Refresh the list after deletion\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'An error occurred');\n    }\n  };\n\n  // Function to add a new expense entry via API\n  const addExpense = async expense => {\n    try {\n      await axios.post(`${BASE_URL}add-expense`, expense);\n      fetchExpenses(); // Refresh the list of expenses after adding\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'An error occurred');\n    }\n  };\n\n  // Function to fetch all expense entries from the API\n  const fetchExpenses = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(`${BASE_URL}get-expenses`);\n      // Add type 'expense' to each expense item\n      const expensesWithType = data.map(expense => ({\n        ...expense,\n        type: 'expense'\n      }));\n      setExpenses(expensesWithType);\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'An error occurred');\n    }\n  };\n\n  // Function to remove an expense entry via API\n  const removeExpense = async id => {\n    try {\n      await axios.delete(`${BASE_URL}delete-expense/${id}`);\n      fetchExpenses(); // Refresh the list after deletion\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      setError(((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'An error occurred');\n    }\n  };\n\n  // Calculate the total amount of income\n  const calculateTotalIncome = () => incomes.reduce((total, income) => total + income.amount, 0);\n\n  // Calculate the total amount of expenses\n  const calculateTotalExpenses = () => expenses.reduce((total, expense) => total + expense.amount, 0);\n\n  // Calculate the overall balance (income - expenses)\n  const calculateTotalBalance = () => calculateTotalIncome() - calculateTotalExpenses();\n\n  // Retrieve the most recent transactions (both income and expenses)\n  const recentTransactions = () => {\n    const history = [...incomes, ...expenses];\n    history.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    return history.slice(0, 3); // Return the latest 3 transactions\n  };\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      addIncome,\n      fetchIncomes,\n      incomes,\n      removeIncome,\n      expenses,\n      addExpense,\n      fetchExpenses,\n      removeExpense,\n      calculateTotalIncome,\n      calculateTotalExpenses,\n      calculateTotalBalance,\n      recentTransactions,\n      error,\n      setError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to access the global context\n_s(GlobalProvider, \"tEtYkz3TSUkMCKA3FBENwBvPpJ4=\");\n_c = GlobalProvider;\nexport const useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"names":["axios","React","useContext","useState","jsxDEV","_jsxDEV","BASE_URL","GlobalContext","createContext","GlobalProvider","children","_s","incomes","setIncomes","expenses","setExpenses","error","setError","addIncome","income","post","fetchIncomes","err","_err$response","_err$response$data","response","data","message","get","incomesWithType","map","type","_err$response2","_err$response2$data","removeIncome","id","delete","_err$response3","_err$response3$data","addExpense","expense","fetchExpenses","_err$response4","_err$response4$data","expensesWithType","_err$response5","_err$response5$data","removeExpense","_err$response6","_err$response6$data","calculateTotalIncome","reduce","total","amount","calculateTotalExpenses","calculateTotalBalance","recentTransactions","history","sort","a","b","Date","createdAt","slice","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["/Users/sovitbhandari/Documents/Documents - Sovit's MacBook Pro/Finance Website/frontend/src/context/globalContext.js"],"sourcesContent":["import axios from 'axios';\nimport React, { useContext, useState } from \"react\";\n\n// Define the base URL for the API\nconst BASE_URL = \"http://localhost:5001/api/v1/\";\n\n// Create a context for global state management\nconst GlobalContext = React.createContext();\n\n// GlobalProvider component to manage state and API requests\nexport const GlobalProvider = ({ children }) => {\n    // State variables to store income, expenses, and errors\n    const [incomes, setIncomes] = useState([]);\n    const [expenses, setExpenses] = useState([]);\n    const [error, setError] = useState(null);\n\n    // Function to add a new income entry via API\n    const addIncome = async (income) => {\n        try {\n            await axios.post(`${BASE_URL}add-income`, income);\n            fetchIncomes(); // Refresh the list of incomes after adding\n        } catch (err) {\n            setError(err.response?.data?.message || 'An error occurred');\n        }\n    };\n\n    const fetchIncomes = async () => {\n        try {\n            const { data } = await axios.get(`${BASE_URL}get-incomes`);\n            // Add type 'income' to each income item\n            const incomesWithType = data.map(income => ({ ...income, type: 'income' }));\n            setIncomes(incomesWithType);\n        } catch (err) {\n            setError(err.response?.data?.message || 'An error occurred');\n        }\n    };\n\n    // Function to remove an income entry via API\n    const removeIncome = async (id) => {\n        try {\n            await axios.delete(`${BASE_URL}delete-income/${id}`);\n            fetchIncomes(); // Refresh the list after deletion\n        } catch (err) {\n            setError(err.response?.data?.message || 'An error occurred');\n        }\n    };\n\n    // Function to add a new expense entry via API\n    const addExpense = async (expense) => {\n        try {\n            await axios.post(`${BASE_URL}add-expense`, expense);\n            fetchExpenses(); // Refresh the list of expenses after adding\n        } catch (err) {\n            setError(err.response?.data?.message || 'An error occurred');\n        }\n    };\n\n    // Function to fetch all expense entries from the API\n    const fetchExpenses = async () => {\n        try {\n            const { data } = await axios.get(`${BASE_URL}get-expenses`);\n            // Add type 'expense' to each expense item\n            const expensesWithType = data.map(expense => ({ ...expense, type: 'expense' }));\n            setExpenses(expensesWithType);\n        } catch (err) {\n            setError(err.response?.data?.message || 'An error occurred');\n        }\n    };\n\n    // Function to remove an expense entry via API\n    const removeExpense = async (id) => {\n        try {\n            await axios.delete(`${BASE_URL}delete-expense/${id}`);\n            fetchExpenses(); // Refresh the list after deletion\n        } catch (err) {\n            setError(err.response?.data?.message || 'An error occurred');\n        }\n    };\n\n    // Calculate the total amount of income\n    const calculateTotalIncome = () => incomes.reduce((total, income) => total + income.amount, 0);\n\n    // Calculate the total amount of expenses\n    const calculateTotalExpenses = () => expenses.reduce((total, expense) => total + expense.amount, 0);\n\n    // Calculate the overall balance (income - expenses)\n    const calculateTotalBalance = () => calculateTotalIncome() - calculateTotalExpenses();\n\n    // Retrieve the most recent transactions (both income and expenses)\n    const recentTransactions = () => {\n        const history = [...incomes, ...expenses];\n        history.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n        return history.slice(0, 3); // Return the latest 3 transactions\n    };\n\n    return (\n        <GlobalContext.Provider value={{\n            addIncome,\n            fetchIncomes,\n            incomes,\n            removeIncome,\n            expenses,\n            addExpense,\n            fetchExpenses,\n            removeExpense,\n            calculateTotalIncome,\n            calculateTotalExpenses,\n            calculateTotalBalance,\n            recentTransactions,\n            error,\n            setError\n        }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\n// Custom hook to access the global context\nexport const useGlobalContext = () => {\n    return useContext(GlobalContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}