{"ast":null,"code":"// import React, { useState } from 'react';\n// import styled from 'styled-components';\n// import { useGlobalContext } from '../../context/globalContext'; // Import context\n// import { closeIcon } from '../../utils/Icons';\n\n// const AuthModal = ({ showModal, setShowModal }) => {\n//     const [isSignIn, setIsSignIn] = useState(true);\n//     const [formData, setFormData] = useState({ email: '', password: '' });\n//     const { signIn, setError } = useGlobalContext(); // Use context, remove signOut if not used\n\n//     // Handle form submission for sign-in\n//     const handleSignIn = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await fetch('/api/auth/signin', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify(formData),\n//             });\n\n//             if (response.ok) {\n//                 signIn(); // Update context state on successful sign-in\n//                 setShowModal(false); // Close modal\n//             } else {\n//                 setError('Sign-in failed: ' + await response.text()); // Handle error\n//             }\n//         } catch (err) {\n//             setError('Sign-in request failed: ' + err.message); // Handle network errors\n//         }\n//     };\n\n//     // Handle form submission for sign-up\n//     const handleSignUp = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await fetch('/api/auth/signup', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify(formData),\n//             });\n\n//             if (response.ok) {\n//                 signIn(); // Optionally sign in after successful sign-up\n//                 setShowModal(false); // Close modal\n//             } else {\n//                 setError('Sign-up failed: ' + await response.text()); // Handle error\n//             }\n//         } catch (err) {\n//             setError('Sign-up request failed: ' + err.message); // Handle network errors\n//         }\n//     };\n\n//     // Close the modal\n//     const closeModal = () => {\n//         setShowModal(false);\n//     };\n\n//     if (!showModal) return null; // Don't render if modal is not shown\n\n//     return (\n//         <ModalOverlay>\n//             <ModalContent>\n//                 <CloseButton onClick={closeModal}>{closeIcon}</CloseButton>\n//                 {isSignIn ? (\n//                     <>\n//                         <h2>Sign In</h2>\n//                         <Form onSubmit={handleSignIn}>\n//                             <Input\n//                                 type=\"email\"\n//                                 value={formData.email}\n//                                 onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n//                                 placeholder=\"Email\"\n//                             />\n//                             <Input\n//                                 type=\"password\"\n//                                 value={formData.password}\n//                                 onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//                                 placeholder=\"Password\"\n//                             />\n//                             <Button type=\"submit\">Sign In</Button>\n//                         </Form>\n//                         <SwitchLink onClick={() => setIsSignIn(false)}>Create an account</SwitchLink>\n//                     </>\n//                 ) : (\n//                     <>\n//                         <h2>Sign Up</h2>\n//                         <Form onSubmit={handleSignUp}>\n//                             <Input\n//                                 type=\"email\"\n//                                 value={formData.email}\n//                                 onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n//                                 placeholder=\"Email\"\n//                             />\n//                             <Input\n//                                 type=\"password\"\n//                                 value={formData.password}\n//                                 onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//                                 placeholder=\"Password\"\n//                             />\n//                             <Button type=\"submit\">Sign Up</Button>\n//                         </Form>\n//                         <SwitchLink onClick={() => setIsSignIn(true)}>Already have an account? Sign In</SwitchLink>\n//                     </>\n//                 )}\n//             </ModalContent>\n//         </ModalOverlay>\n//     );\n// };\n\n// // Styled-components for the modal\n// const ModalOverlay = styled.div`\n//     position: fixed;\n//     top: 0;\n//     left: 0;\n//     width: 100%;\n//     height: 100%;\n//     background: rgba(0, 0, 0, 0.5);\n//     display: flex;\n//     justify-content: center;\n//     align-items: center;\n//     z-index: 1000;\n// `;\n\n// const ModalContent = styled.div`\n//     position: relative; /* Add position relative */\n//     background: white;\n//     padding: 2rem;\n//     border-radius: 8px;\n//     max-width: 400px;\n//     width: 100%;\n//     text-align: center;\n// `;\n\n// const Form = styled.form`\n//     display: flex;\n//     flex-direction: column;\n//     gap: 1rem;\n// `;\n\n// const Input = styled.input`\n//     padding: 0.75rem;\n//     border: 1px solid #ccc;\n//     border-radius: 4px;\n//     font-size: 1rem;\n// `;\n\n// const Button = styled.button`\n//     padding: 0.75rem;\n//     background: #007bff;\n//     border: none;\n//     border-radius: 4px;\n//     color: white;\n//     font-size: 1rem;\n//     cursor: pointer;\n\n//     &:hover {\n//         background: #0056b3;\n//     }\n// `;\n\n// const SwitchLink = styled.a`\n//     color: #007bff;\n//     cursor: pointer;\n//     margin-top: 1rem;\n//     display: block;\n\n//     &:hover {\n//         text-decoration: underline;\n//     }\n// `;\n\n// const CloseButton = styled.button`\n//     position: absolute; /* Position the button absolutely */\n//     top: 1rem;\n//     right: 1rem;\n//     background: none;\n//     border: none;\n//     color: #007bff;\n//     cursor: pointer;\n//     font-size: 1.5rem;\n\n//     &:hover {\n//         color: #0056b3;\n//     }\n// `;\n\n// export default AuthModal;","map":{"version":3,"names":[],"sources":["/Users/sovitbhandari/Documents/Documents - Sovit's MacBook Pro/Finance Website/frontend/src/Components/Modal/AuthModal.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import styled from 'styled-components';\n// import { useGlobalContext } from '../../context/globalContext'; // Import context\n// import { closeIcon } from '../../utils/Icons';\n\n// const AuthModal = ({ showModal, setShowModal }) => {\n//     const [isSignIn, setIsSignIn] = useState(true);\n//     const [formData, setFormData] = useState({ email: '', password: '' });\n//     const { signIn, setError } = useGlobalContext(); // Use context, remove signOut if not used\n\n//     // Handle form submission for sign-in\n//     const handleSignIn = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await fetch('/api/auth/signin', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify(formData),\n//             });\n\n//             if (response.ok) {\n//                 signIn(); // Update context state on successful sign-in\n//                 setShowModal(false); // Close modal\n//             } else {\n//                 setError('Sign-in failed: ' + await response.text()); // Handle error\n//             }\n//         } catch (err) {\n//             setError('Sign-in request failed: ' + err.message); // Handle network errors\n//         }\n//     };\n\n//     // Handle form submission for sign-up\n//     const handleSignUp = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await fetch('/api/auth/signup', {\n//                 method: 'POST',\n//                 headers: {\n//                     'Content-Type': 'application/json',\n//                 },\n//                 body: JSON.stringify(formData),\n//             });\n\n//             if (response.ok) {\n//                 signIn(); // Optionally sign in after successful sign-up\n//                 setShowModal(false); // Close modal\n//             } else {\n//                 setError('Sign-up failed: ' + await response.text()); // Handle error\n//             }\n//         } catch (err) {\n//             setError('Sign-up request failed: ' + err.message); // Handle network errors\n//         }\n//     };\n\n//     // Close the modal\n//     const closeModal = () => {\n//         setShowModal(false);\n//     };\n\n//     if (!showModal) return null; // Don't render if modal is not shown\n\n//     return (\n//         <ModalOverlay>\n//             <ModalContent>\n//                 <CloseButton onClick={closeModal}>{closeIcon}</CloseButton>\n//                 {isSignIn ? (\n//                     <>\n//                         <h2>Sign In</h2>\n//                         <Form onSubmit={handleSignIn}>\n//                             <Input\n//                                 type=\"email\"\n//                                 value={formData.email}\n//                                 onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n//                                 placeholder=\"Email\"\n//                             />\n//                             <Input\n//                                 type=\"password\"\n//                                 value={formData.password}\n//                                 onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//                                 placeholder=\"Password\"\n//                             />\n//                             <Button type=\"submit\">Sign In</Button>\n//                         </Form>\n//                         <SwitchLink onClick={() => setIsSignIn(false)}>Create an account</SwitchLink>\n//                     </>\n//                 ) : (\n//                     <>\n//                         <h2>Sign Up</h2>\n//                         <Form onSubmit={handleSignUp}>\n//                             <Input\n//                                 type=\"email\"\n//                                 value={formData.email}\n//                                 onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n//                                 placeholder=\"Email\"\n//                             />\n//                             <Input\n//                                 type=\"password\"\n//                                 value={formData.password}\n//                                 onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n//                                 placeholder=\"Password\"\n//                             />\n//                             <Button type=\"submit\">Sign Up</Button>\n//                         </Form>\n//                         <SwitchLink onClick={() => setIsSignIn(true)}>Already have an account? Sign In</SwitchLink>\n//                     </>\n//                 )}\n//             </ModalContent>\n//         </ModalOverlay>\n//     );\n// };\n\n// // Styled-components for the modal\n// const ModalOverlay = styled.div`\n//     position: fixed;\n//     top: 0;\n//     left: 0;\n//     width: 100%;\n//     height: 100%;\n//     background: rgba(0, 0, 0, 0.5);\n//     display: flex;\n//     justify-content: center;\n//     align-items: center;\n//     z-index: 1000;\n// `;\n\n// const ModalContent = styled.div`\n//     position: relative; /* Add position relative */\n//     background: white;\n//     padding: 2rem;\n//     border-radius: 8px;\n//     max-width: 400px;\n//     width: 100%;\n//     text-align: center;\n// `;\n\n// const Form = styled.form`\n//     display: flex;\n//     flex-direction: column;\n//     gap: 1rem;\n// `;\n\n// const Input = styled.input`\n//     padding: 0.75rem;\n//     border: 1px solid #ccc;\n//     border-radius: 4px;\n//     font-size: 1rem;\n// `;\n\n// const Button = styled.button`\n//     padding: 0.75rem;\n//     background: #007bff;\n//     border: none;\n//     border-radius: 4px;\n//     color: white;\n//     font-size: 1rem;\n//     cursor: pointer;\n    \n//     &:hover {\n//         background: #0056b3;\n//     }\n// `;\n\n// const SwitchLink = styled.a`\n//     color: #007bff;\n//     cursor: pointer;\n//     margin-top: 1rem;\n//     display: block;\n    \n//     &:hover {\n//         text-decoration: underline;\n//     }\n// `;\n\n// const CloseButton = styled.button`\n//     position: absolute; /* Position the button absolutely */\n//     top: 1rem;\n//     right: 1rem;\n//     background: none;\n//     border: none;\n//     color: #007bff;\n//     cursor: pointer;\n//     font-size: 1.5rem;\n\n//     &:hover {\n//         color: #0056b3;\n//     }\n// `;\n\n// export default AuthModal;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}